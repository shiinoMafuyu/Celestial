1.前端是和用户交互实际为用户提供功能的。所以用户就是借口，用户需要什么功能就在interface里规定。
再由其他分包进行实现。

1.impl实现种类其实有很多，都分在一个包里不好。
2.exchange 和用户交互其实就是接口，不需要再定义接口包。

exchange -->用户交互中心，接口调用者，真正的的接口需求来源。
interface -->
	impl
	dependency
	
//接口不能像java一样调用子类，但是可以再接口里手动调用以后直接全部替换就行。


js的功能实现，表现在主要是页面事件绑定。

自上而下，避免偏颇。

事件绑定放一起。

1.并没有必须进行js文件类型划分的必要，虽然从长远上有！
但是程序的修改永远是必不可少的，就算最最顶级的来写也是一样，有合理的自动化的测试，问题不大。

2.由impl包中直接去依赖dependency包好了，接口应该单纯点，只做接口的事。

3.Qunit测试文件夹都放在js目录再下级目录下。

4.发现现在的js代码不够面向对象，跟改为目前java代码设计方式。功能类 + 依赖类。
依赖类里以接口形式提供外部调用方法，并且在自身内实现外部接口方法。


>>数据结构结构，表示:
1.直接在junit里体现，加点注释。
2.在设计文档文档里说明。


----------------------------------
store.get("positionMemory")
store中内存数据"positionMemory"保存了每个位置的搜索信息，装备信息。
可以取出来作为计算数据。



-------------------------------------
1.把全部事件绑定在一个页面里，定时刷新。
这就是用户交互，页面功能接口，其他地方只是实现。









